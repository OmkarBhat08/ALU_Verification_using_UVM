$date
	Fri Aug 29 20:25:50 2025
$end
$version
	QuestaSim Version 10.6c
$end
$timescale
	1ns
$end

$scope module uvm_root $end
$upscope $end

$scope module top $end
$var reg 1 ! clk $end

$scope module DUT $end
$var parameter 32 " DW $end
$var parameter 32 # CW $end
$var wire 1 $ OPA [7] $end
$var wire 1 % OPA [6] $end
$var wire 1 & OPA [5] $end
$var wire 1 ' OPA [4] $end
$var wire 1 ( OPA [3] $end
$var wire 1 ) OPA [2] $end
$var wire 1 * OPA [1] $end
$var wire 1 + OPA [0] $end
$var wire 1 , OPB [7] $end
$var wire 1 - OPB [6] $end
$var wire 1 . OPB [5] $end
$var wire 1 / OPB [4] $end
$var wire 1 0 OPB [3] $end
$var wire 1 1 OPB [2] $end
$var wire 1 2 OPB [1] $end
$var wire 1 3 OPB [0] $end
$var wire 1 4 CLK $end
$var wire 1 5 RST $end
$var wire 1 6 CE $end
$var wire 1 7 MODE $end
$var wire 1 8 CIN $end
$var wire 1 9 CMD [3] $end
$var wire 1 : CMD [2] $end
$var wire 1 ; CMD [1] $end
$var wire 1 < CMD [0] $end
$var wire 1 = INP_VALID [1] $end
$var wire 1 > INP_VALID [0] $end
$var reg 10 ? RES [9:0] $end
$var reg 1 @ COUT $end
$var reg 1 A OFLOW $end
$var reg 1 B G $end
$var reg 1 C E $end
$var reg 1 D L $end
$var reg 1 E ERR $end
$var reg 8 F OPA_1 [7:0] $end
$var reg 8 G OPB_1 [7:0] $end
$var reg 8 H oprd1 [7:0] $end
$var reg 8 I oprd2 [7:0] $end
$var reg 4 J CMD_tmp [3:0] $end
$var reg 8 K AU_out_tmp1 [7:0] $end
$var reg 8 L AU_out_tmp2 [7:0] $end
$var reg 5 M wait_counter [4:0] $end
$var reg 1 N oprd1_valid $end
$var reg 1 O oprd2_valid $end
$upscope $end

$scope module ASSERTION $end
$var parameter 32 P DW $end
$var parameter 32 Q CW $end
$var reg 1 R rst $end
$var reg 1 S clk $end
$var reg 1 T mode $end
$var reg 1 U ce $end
$var reg 1 V cin $end
$var reg 2 W inp_valid [1:0] $end
$var reg 4 X cmd [3:0] $end
$var reg 8 Y opa [7:0] $end
$var reg 8 Z opb [7:0] $end
$var reg 9 [ res [8:0] $end
$var reg 1 \ err $end
$var reg 1 ] oflow $end
$var reg 1 ^ cout $end
$var reg 1 _ g $end
$var reg 1 ` l $end
$var reg 1 a e $end
$upscope $end
$upscope $end

$scope begin uvm_pkg $end
$var parameter 32 b UVM_HDL_MAX_WIDTH $end
$var parameter 32 c UVM_STREAMBITS $end
$var parameter 32 d UVM_RADIX $end
$var parameter 32 e UVM_MACRO_NUMFLAGS $end
$var parameter 32 f UVM_DEFAULT $end
$var parameter 32 g UVM_ALL_ON $end
$var parameter 32 h UVM_FLAGS_ON $end
$var parameter 32 i UVM_FLAGS_OFF $end
$var parameter 32 j UVM_COPY $end
$var parameter 32 k UVM_NOCOPY $end
$var parameter 32 l UVM_COMPARE $end
$var parameter 32 m UVM_NOCOMPARE $end
$var parameter 32 n UVM_PRINT $end
$var parameter 32 o UVM_NOPRINT $end
$var parameter 32 p UVM_RECORD $end
$var parameter 32 q UVM_NORECORD $end
$var parameter 32 r UVM_PACK $end
$var parameter 32 s UVM_NOPACK $end
$var parameter 32 t UVM_PHYSICAL $end
$var parameter 32 u UVM_ABSTRACT $end
$var parameter 32 v UVM_READONLY $end
$var parameter 32 w UVM_NODEFPRINT $end
$var parameter 32 x UVM_MACRO_EXTRAS $end
$var parameter 32 y UVM_FLAGS $end
$var parameter 32 z UVM_UNPACK $end
$var parameter 32 { UVM_CHECK_FIELDS $end
$var parameter 32 | UVM_END_DATA_EXTRA $end
$var parameter 32 } UVM_START_FUNCS $end
$var parameter 32 ~ UVM_SET $end
$var parameter 32 !! UVM_SETINT $end
$var parameter 32 "! UVM_SETOBJ $end
$var parameter 32 #! UVM_SETSTR $end
$var parameter 32 $! UVM_END_FUNCS $end
$var parameter 32 %! UVM_STR_CRC_POLYNOMIAL $end
$var parameter 32 &! UVM_STDOUT $end
$var parameter 32 '! UVM_LINE_WIDTH $end
$var parameter 32 (! UVM_NUM_LINES $end
$var parameter 32 )! UVM_SMALL_STRING $end
$var parameter 32 *! UVM_LARGE_STRING $end
$var reg 1 +! uvm_start_uvm_declarations $end
$var integer 32 ,! uvm_global_random_seed $end
$var integer 32 -! UVM_UNBOUNDED_CONNECTIONS $end

$scope function uvm_hdl_check_path $end
$var integer 32 .! uvm_hdl_check_path $end
$upscope $end

$scope function uvm_hdl_deposit $end
$var integer 32 /! uvm_hdl_deposit $end
$var reg 1024 0! value [1023:0] $end
$upscope $end

$scope function uvm_hdl_force $end
$var integer 32 1! uvm_hdl_force $end
$var reg 1024 2! value [1023:0] $end
$upscope $end

$scope task uvm_hdl_force_time $end
$var reg 1024 3! value [1023:0] $end
$var time 64 4! force_time $end
$upscope $end

$scope function uvm_hdl_release_and_read $end
$var integer 32 5! uvm_hdl_release_and_read $end
$var reg 1024 6! value [1023:0] $end
$upscope $end

$scope function uvm_hdl_release $end
$var integer 32 7! uvm_hdl_release $end
$upscope $end

$scope function uvm_hdl_read $end
$var integer 32 8! uvm_hdl_read $end
$var reg 1024 9! value [1023:0] $end
$upscope $end

$scope function uvm_dpi_get_next_arg_c $end
$upscope $end

$scope function uvm_dpi_get_tool_name_c $end
$upscope $end

$scope function uvm_dpi_get_tool_version_c $end
$upscope $end

$scope function uvm_dpi_get_next_arg $end
$upscope $end

$scope function uvm_dpi_get_tool_name $end
$upscope $end

$scope function uvm_dpi_get_tool_version $end
$upscope $end

$scope function uvm_dpi_regcomp $end
$upscope $end

$scope function uvm_dpi_regexec $end
$var integer 32 :! uvm_dpi_regexec $end
$upscope $end

$scope function uvm_dpi_regfree $end
$upscope $end

$scope function uvm_re_match $end
$var integer 32 ;! uvm_re_match $end
$upscope $end

$scope function uvm_dump_re_cache $end
$upscope $end

$scope function uvm_glob_to_re $end
$upscope $end

$scope function uvm_revision_string $end
$upscope $end

$scope function uvm_radix_to_string $end
$var integer 32 <! radix $end
$upscope $end

$scope function uvm_instance_scope $end
$var reg 8 =! c [7:0] $end
$var integer 32 >! pos $end
$upscope $end

$scope function uvm_oneway_hash $end
$var integer 32 ?! uvm_oneway_hash $end
$var integer 32 @! seed $end
$var reg 1 A! msb $end
$var reg 8 B! current_byte [7:0] $end
$var reg 32 C! crc1 [31:0] $end
$upscope $end

$scope function uvm_create_random_seed $end
$var integer 32 D! uvm_create_random_seed $end
$upscope $end

$scope function uvm_object_value_str $end
$upscope $end

$scope function uvm_leaf_scope $end
$var reg 8 E! scope_separator [7:0] $end
$var reg 8 F! bracket_match [7:0] $end
$var integer 32 G! pos $end
$var integer 32 H! bmatches $end
$upscope $end

$scope function uvm_vector_to_string $end
$var reg 4096 I! value [4095:0] $end
$var integer 32 J! size $end
$var integer 32 K! radix $end
$upscope $end

$scope function uvm_get_array_index_int $end
$var integer 32 L! uvm_get_array_index_int $end
$var reg 1 M! is_wildcard $end
$var integer 32 N! i $end
$upscope $end

$scope function uvm_get_array_index_string $end
$var reg 1 O! is_wildcard $end
$var integer 32 P! i $end
$upscope $end

$scope function uvm_is_array $end
$var reg 1 Q! uvm_is_array $end
$upscope $end

$scope function uvm_has_wildcard $end
$upscope $end

$scope task run_test $end
$upscope $end

$scope function global_stop_request $end
$upscope $end

$scope function set_global_timeout $end
$var time 64 R! timeout $end
$var reg 1 S! overridable $end
$upscope $end

$scope function set_global_stop_timeout $end
$var time 64 T! timeout $end
$upscope $end

$scope function uvm_report_enabled $end
$var reg 1 U! uvm_report_enabled $end
$var integer 32 V! verbosity $end
$var reg 2 W! severity [1:0] $end
$upscope $end

$scope function uvm_report $end
$var reg 2 X! severity [1:0] $end
$var integer 32 Y! verbosity $end
$var integer 32 Z! line $end
$upscope $end

$scope function uvm_report_info $end
$var integer 32 [! verbosity $end
$var integer 32 \! line $end
$upscope $end

$scope function uvm_report_warning $end
$var integer 32 ]! verbosity $end
$var integer 32 ^! line $end
$upscope $end

$scope function uvm_report_error $end
$var integer 32 _! verbosity $end
$var integer 32 `! line $end
$upscope $end

$scope function uvm_report_fatal $end
$var integer 32 a! verbosity $end
$var integer 32 b! line $end
$upscope $end

$scope function uvm_string_to_severity $end
$var reg 1 c! uvm_string_to_severity $end
$var reg 2 d! sev [1:0] $end
$upscope $end

$scope function uvm_string_to_action $end
$upscope $end

$scope function set_config_int $end
$var reg 4096 e! value [4095:0] $end
$upscope $end

$scope function set_config_object $end
$var reg 1 f! clone $end
$upscope $end

$scope function set_config_string $end
$upscope $end

$scope function uvm_is_match $end
$var reg 1 g! uvm_is_match $end
$upscope $end

$scope function uvm_string_to_bits $end
$var reg 115200 h! uvm_string_to_bits [115199:0] $end
$upscope $end

$scope function uvm_bits_to_string $end
$var reg 115200 i! str [115199:0] $end
$upscope $end

$scope task uvm_wait_for_nba_region $end
$var integer 32 j! nba $end
$var integer 32 k! next_nba $end
$upscope $end

$scope function uvm_split_string $end
$upscope $end

$scope function uvm_hdl_concat2string $end
$upscope $end
$upscope $end

$scope begin alu_pkg $end
$upscope $end

$scope begin top_sv_unit $end
$upscope $end

$scope begin std $end
$upscope $end

$scope begin questa_uvm_pkg $end
